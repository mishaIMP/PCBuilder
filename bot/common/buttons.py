from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder


class Buttons:
    start_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='üîç', callback_data='find'),
                          InlineKeyboardButton(text='‚ûï', callback_data='add'),
                          InlineKeyboardButton(text='üñ•', callback_data='my')]]
    )
    back_to_main_menu = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]])

    back_to_filters = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='–ø–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º', callback_data='to_filters')]]
    )

    show_pc_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='üëç', callback_data='like'),
                          InlineKeyboardButton(text='üëé', callback_data='dislike')],
                         [InlineKeyboardButton(text='‚û°', callback_data='next')],
                         [InlineKeyboardButton(text='—Ñ–∏–ª—å—Ç—Ä—ã', callback_data='to_filters')]]
    )

    back_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='üîô–Ω–∞–∑–∞–¥', callback_data='back')]]
    )

    skip_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='‚è≠–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skip')]]
    )

    time_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='–¥–µ–Ω—å', callback_data='day'),
                          InlineKeyboardButton(text='–Ω–µ–¥–µ–ª—è', callback_data='week'),
                          InlineKeyboardButton(text='–º–µ—Å—è—Ü', callback_data='month')],
                         [InlineKeyboardButton(text='3 –º–µ—Å—è—Ü–∞', callback_data='3 months'),
                          InlineKeyboardButton(text='–≥–æ–¥', callback_data='year')]]
    )

    my_pc_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='‚úè–∏–∑–º–µ–Ω–∏—Ç—å', callback_data='change')],
                         [InlineKeyboardButton(text='üîô–Ω–∞–∑–∞–¥', callback_data='back')]]
    )

    @staticmethod
    def filter_markup(filters: dict) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        filters_ = {
            'min_price': 'üí¥min —Å—Ç–æ–∏–º–æ—Å—Ç—å',
            'max_price': 'üíµmax —Å—Ç–æ–∏–º–æ—Å—Ç—å',
            'title': 'üìù–Ω–∞–∑–≤–∞–Ω–∏–µ',
            'author': 'ü§µ‚Äç–∞–≤—Ç–æ—Ä'
        }
        filter_exists = False
        for i in filters_:
            if filters[i]:
                filter_exists = True
            text = f'{filters_[i]}: {filters[i]}' if filters[i] else filters_[i]
            btn = InlineKeyboardButton(text=text, callback_data=i)
            builder.row(btn)
        if filter_exists:
            builder.row(InlineKeyboardButton(text='üßπ—Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data='reset_filters'))
        builder.row(
            InlineKeyboardButton(text='üîç–∏—Å–∫–∞—Ç—å', callback_data='find'),
            InlineKeyboardButton(text='üîô–Ω–∞–∑–∞–¥', callback_data='back')
        )
        return builder.as_markup()

    @staticmethod
    def add_info_markup(added: dict) -> InlineKeyboardMarkup:
        info = {'–º–æ–¥–µ–ª—å': 'model', '—Ü–µ–Ω–∞': 'price', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'amount', '—Å—Å—ã–ª–∫–∞': 'link'}
        builder = InlineKeyboardBuilder()
        is_ready = True
        for key, val in info.items():
            if not val not in ('amount', 'link') and val not in added:
                is_ready = False
            icon = '‚úè' if added[val] else ''
            btn = InlineKeyboardButton(text=icon + key, callback_data=val)
            builder.row(btn)
        if is_ready:
            save_btn = InlineKeyboardButton(text='‚úÖ—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save')
            builder.row(save_btn, InlineKeyboardButton(text='üóë—É–¥–∞–ª–∏—Ç—å', callback_data='delete'))
        else:
            builder.row(InlineKeyboardButton(text='üîô–Ω–∞–∑–∞–¥', callback_data='back'))

        return builder.as_markup()

    @staticmethod
    def comp_markup(added=None) -> InlineKeyboardMarkup:
        if not added:
            added = []
        components = {
            '–Ω–∞–∑–≤–∞–Ω–∏–µ': 'title',
            '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä': 'cpu',
            '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫—É—é –ø–ª–∞—Ç—É': 'motherboard',
            '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å': 'ram',
            '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É': 'gpu',
            'HDD/SSD': 'storage',
            '–∫–æ—Ä–ø—É—Å': 'case',
            '–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è': 'psu',
            '–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞': 'culler'
        }
        builder = InlineKeyboardBuilder()
        is_ready = True
        for key, val in components.items():
            if val not in added:
                if val in ('title', 'cpu', 'motherboard', 'ram'):
                    is_ready = False
                btn = InlineKeyboardButton(text=key, callback_data=val)
            else:
                btn = InlineKeyboardButton(text='‚úè' + key, callback_data='edit_' + val)
            builder.row(btn)

        additional_components = {
            'fan': '–∫–æ—Ä–ø—É—Å–Ω—ã–µ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã',
            'sound_card': '–∑–≤—É–∫–æ–≤—É—é –∫–∞—Ä—Ç—É',
            'lan_card': '—Å–µ—Ç–µ–≤—É—é –∫–∞—Ä—Ç—É',
            'gpu_holder': '–¥–∞—Ä–∂–∞—Ç–µ–ª—å –¥–ª—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã',
            'more_storage': '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ HDD/SSD'
        }
        count = 0
        for comp in added:
            if comp in additional_components.keys():
                btn = InlineKeyboardButton(text='‚úè' + additional_components[comp], callback_data='edit_' + comp)
                builder.row(btn)
                count += 1

        if count < 5:
            builder.row(InlineKeyboardButton(text='‚ûï–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ', callback_data='additional'))

        if is_ready:
            finish_btn = InlineKeyboardButton(text='‚úÖ—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save')
            builder.row(finish_btn)

        builder.row(InlineKeyboardButton(text='üóë—É–¥–∞–ª–∏—Ç—å —Å–±–æ—Ä–∫—É', callback_data='back'))

        return builder.as_markup()

    @staticmethod
    def additional_comp_markup(added=None) -> InlineKeyboardMarkup:
        if not added:
            added = []
        additional_components = {
            'fan': '–∫–æ—Ä–ø—É—Å–Ω—ã–µ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã',
            'sound_card': '–∑–≤—É–∫–æ–≤—É—é –∫–∞—Ä—Ç—É',
            'lan_card': '—Å–µ—Ç–µ–≤—É—é –∫–∞—Ä—Ç—É',
            'gpu_holder': '–¥–∞—Ä–∂–∞—Ç–µ–ª—å –¥–ª—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã',
            'more_storage': '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ HDD/SSD'
        }
        builder = InlineKeyboardBuilder()
        for component in additional_components:
            if component not in added:
                builder.row(InlineKeyboardButton(text=additional_components[component], callback_data=component))
        return builder.as_markup()

    @staticmethod
    def final_markup() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text='‚úè–∏–∑–º–µ–Ω–∏—Ç—å', callback_data='change')],
                             [InlineKeyboardButton(text='üïµÔ∏è‚Äç—É–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ —Å–±–æ—Ä–∫–∏', callback_data='set_author')],
                             [InlineKeyboardButton(text='‚ùå–Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å', callback_data='skip')]]
        )

    @staticmethod
    def my_builds(data: list[dict]) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        for build in data:
            if build['title']:
                builder.row(
                    InlineKeyboardButton(text=build['title'],
                                         callback_data='assembly_' + str(build['id']))
                )
        builder.row(InlineKeyboardButton(text='üîô–Ω–∞–∑–∞–¥', callback_data='back'))
        return builder.as_markup()
