from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


class Buttons:
    @staticmethod
    def start_markup():
        start_markup = InlineKeyboardMarkup(row_width=3)
        start_markup.add(
            InlineKeyboardButton('üîç', callback_data='find'),
            InlineKeyboardButton('‚ûï', callback_data='add'),
            InlineKeyboardButton('üñ•', callback_data='my')
        )
        return start_markup

    @staticmethod
    def back_markup():
        back_markup = InlineKeyboardMarkup()
        back_markup.add(InlineKeyboardButton('üîô–Ω–∞–∑–∞–¥', callback_data='back'))
        return back_markup

    @staticmethod
    def skip_markup():
        skip_markup = InlineKeyboardMarkup()
        skip_markup.add(InlineKeyboardButton('‚è≠–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skip'))
        return skip_markup

    @staticmethod
    def filter_markup(filters: dict):
        filter_markup = InlineKeyboardMarkup()
        filters_ = {
            'min_price': 'üí¥min —Å—Ç–æ–∏–º–æ—Å—Ç—å',
            'max_price': 'üíµmax —Å—Ç–æ–∏–º–æ—Å—Ç—å',
            'title': 'üìù–Ω–∞–∑–≤–∞–Ω–∏–µ',
            'author': 'ü§µ‚Äç–∞–≤—Ç–æ—Ä',
            'date': 'üóì–≤—Ä–µ–º—è'
        }
        time = {'day': '–¥–µ–Ω—å', 'week': '–Ω–µ–¥–µ–ª—è', 'month': '–º–µ—Å—è—Ü', '3 months': '3 –º–µ—Å—è—Ü–∞', 'year': '–≥–æ–¥'}
        filter_exists = False
        for i in filters_:
            if filters[i]:
                filter_exists = True
            if i == 'date':
                text = f'{filters_[i]}: {time[filters[i]]}' if filters[i] else filters_[i]
            else:
                text = f'{filters_[i]}: {filters[i]}' if filters[i] else filters_[i]
            btn = InlineKeyboardButton(text, callback_data=i)
            filter_markup.add(btn)
        if filter_exists:
            filter_markup.add(InlineKeyboardButton('üßπ—Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data='no filters'))
        filter_markup.add(
            InlineKeyboardButton('üîç–∏—Å–∫–∞—Ç—å', callback_data='find'),
            InlineKeyboardButton('üîô–Ω–∞–∑–∞–¥', callback_data='back')
        )
        return filter_markup

    @staticmethod
    def time_markup():
        time_markup = InlineKeyboardMarkup()
        time_markup.add(
            InlineKeyboardButton('–¥–µ–Ω—å', callback_data='day'),
            InlineKeyboardButton('–Ω–µ–¥–µ–ª—è', callback_data='week'),
            InlineKeyboardButton('–º–µ—Å—è—Ü', callback_data='month'),
            InlineKeyboardButton('3 –º–µ—Å—è—Ü–∞', callback_data='3 months'),
            InlineKeyboardButton('–≥–æ–¥', callback_data='year')
        )
        return time_markup

    @staticmethod
    def add_info_markup(added: dict):
        info = {'–º–æ–¥–µ–ª—å': 'model', '—Ü–µ–Ω—É': 'price', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'amount', '—Å—Å—ã–ª–∫—É': 'link'}
        info_markup = InlineKeyboardMarkup(row_width=1)
        is_ready = True
        for key, val in info.items():
            if not val not in ('amount', 'link') and val not in added:
                is_ready = False
            icon = '‚úè' if added[val] else ''
            btn = InlineKeyboardButton(icon + key, callback_data=val)
            info_markup.add(btn)
        if is_ready:
            save_btn = InlineKeyboardButton('‚úÖ—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save')
            info_markup.add(save_btn, InlineKeyboardButton('üóë—É–¥–∞–ª–∏—Ç—å', callback_data='delete'))
        else:
            info_markup.add(InlineKeyboardButton('üîô–Ω–∞–∑–∞–¥', callback_data='back'))

        return info_markup

    @staticmethod
    def build_comp_markup(added, edit: bool = False):
        components = {
            '–Ω–∞–∑–≤–∞–Ω–∏–µ': 'title',
            '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä': 'cpu',
            '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É': 'gpu',
            '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫—É—é –ø–ª–∞—Ç—É': 'motherboard',
            '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å': 'ram',
            'HDD/SSD': 'storage',
            '–∫–æ—Ä–ø—É—Å': 'case',
            '–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è': 'psu',
            '–∫—É–ª–ª–µ—Ä/–°–ñ–û': 'culler',
            '–∫–æ—Ä–ø—É—Å–Ω—ã–µ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã': 'fan'
        }
        comp_markup = InlineKeyboardMarkup(row_width=2)
        is_ready = True
        for key, val in components.items():
            if val not in added:
                if val in ('title', 'cpu', 'gpu', 'motherboard', 'ram'):
                    is_ready = False
                btn = InlineKeyboardButton(key, callback_data=val)
            else:
                btn = InlineKeyboardButton('‚úè' + key, callback_data='edit_' + val)
            comp_markup.add(btn)

        count = 0
        for comp in added:
            if comp not in components.values():
                btn = InlineKeyboardButton('‚úè' + comp, callback_data='edit_' + comp)
                comp_markup.add(btn)
                count += 1

        if count < 5:
            comp_markup.add(InlineKeyboardButton('‚ûï–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ', callback_data='additional'))

        if is_ready:
            finish_btn = InlineKeyboardButton('‚úÖ—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='edit_save' if edit else 'save')
            comp_markup.add(finish_btn)

        comp_markup.add(InlineKeyboardButton('üóë—É–¥–∞–ª–∏—Ç—å —Å–±–æ—Ä–∫—É', callback_data='back'))

        return comp_markup

    @staticmethod
    def build_final_markup(username, back: bool = False):
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton('‚úè–∏–∑–º–µ–Ω–∏—Ç—å', callback_data='change'),
            InlineKeyboardButton('üïµÔ∏è‚Äç—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ', callback_data='save_anonim'),
            InlineKeyboardButton(f'üòÄ—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç @{username}', callback_data='save_with_username')
        )
        if back:
            markup.add(InlineKeyboardButton('üîô–Ω–∞–∑–∞–¥', callback_data='back'))
        return markup
    
    @staticmethod
    def my_assemblies(data: list[dict]):
        markup = InlineKeyboardMarkup(row_width=1)
        for item in data:
            if item['title']:
                markup.add(InlineKeyboardButton(item['title'], callback_data='assembly_' + str(item['id'])))
        markup.add(InlineKeyboardButton('üîô–Ω–∞–∑–∞–¥', callback_data='back'))
        return markup
    
    @staticmethod
    def show_pc_markup():
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton('—Ñ–∏–ª—å—Ç—Ä—ã', callback_data='back'),
            InlineKeyboardButton('‚ù§Ô∏è', callback_data='like'),
            InlineKeyboardButton('<<<', callback_data='prev'),
            InlineKeyboardButton('>>>', callback_data='next')
            )
        return markup
