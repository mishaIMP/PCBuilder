from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

find_btn = InlineKeyboardButton('üîç', callback_data='find')
add_btn = InlineKeyboardButton('‚ûï', callback_data='add')
my_btn = InlineKeyboardButton('üñ•', callback_data='my')
start_markup = InlineKeyboardMarkup(row_width=2)
start_markup.add(find_btn, add_btn, my_btn)

back_btn = InlineKeyboardButton('üîô', callback_data='back')
back_markup = InlineKeyboardMarkup()
back_markup.add(back_btn)

skip_markup = InlineKeyboardMarkup()
skip_markup.add(InlineKeyboardButton('–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skip'))


def add_info_markup(added: dict):
    info = {'–º–æ–¥–µ–ª—å': 'model', '—Ü–µ–Ω—É': 'price', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'amount', '—Å—Å—ã–ª–∫—É': 'link'}
    info_markup = InlineKeyboardMarkup(row_width=1)
    is_ready = True
    for key, val in info.items():
        if not val not in ('amount', 'link') and val not in added:
            is_ready = False
        icon = '‚úè' if added[val] else ''
        btn = InlineKeyboardButton(icon + key + icon, callback_data=val)
        info_markup.add(btn)
    if is_ready:
        save_btn = InlineKeyboardButton('‚òë', callback_data='save')
        info_markup.add(save_btn, InlineKeyboardButton('üóë', callback_data='delete'))
    else:
        info_markup.add(InlineKeyboardButton('üîô', callback_data='back'))

    return info_markup


def build_comp_markup(added):
    components = {
        '–Ω–∞–∑–≤–∞–Ω–∏–µ': 'title',
        '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä': 'cpu',
        '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É': 'gpu',
        '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫—É—é –ø–ª–∞—Ç—É': 'motherboard',
        '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å': 'ram',
        'HDD/SSD': 'storage',
        '–∫–æ—Ä–ø—É—Å': 'case',
        '–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è': 'psu',
        '–∫—É–ª–ª–µ—Ä/–°–ñ–û': 'culler',
        '–∫–æ—Ä–ø—É—Å–Ω—ã–µ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã': 'fan'
    }
    comp_markup = InlineKeyboardMarkup(row_width=2)
    is_ready = True
    for key, val in components.items():
        if val not in added:
            is_ready = False
            btn = InlineKeyboardButton(key, callback_data=val)
        else:
            btn = InlineKeyboardButton('‚úè' + key + '‚úè', callback_data='edit_' + val)
        comp_markup.add(btn)

    count = 0
    for comp in added:
        if comp not in components.values():
            btn = InlineKeyboardButton('‚úè' + comp + '‚úè', callback_data='edit_' + comp)
            comp_markup.add(btn)
            count += 1

    if count < 5:
        comp_markup.add(InlineKeyboardButton('‚ûï', callback_data='additional'))

    if is_ready:
        finish_btn = InlineKeyboardButton('‚òë', callback_data='save')
        comp_markup.add(finish_btn)

    comp_markup.add(InlineKeyboardButton('—É–¥–∞–ª–∏—Ç—å —Å–±–æ—Ä–∫—É', callback_data='back'))

    return comp_markup


def build_final_markup(username):
    markup = InlineKeyboardMarkup()
    change_btn = InlineKeyboardButton('‚úè', callback_data='change')
    save_anonymously = InlineKeyboardButton('—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ', callback_data='save_anonim')
    save_with_username = InlineKeyboardButton(f'—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç @{username}', callback_data='save_with_username')
    markup.add(change_btn, save_anonymously, save_with_username)
    return markup
